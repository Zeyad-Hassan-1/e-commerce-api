openapi: 3.0.1
info:
  title: Shopping Cart API
  description: E-commerce backend solution built with Ruby on Rails 8.0.2
  version: v1
  contact:
    email: api-support@example.com
servers:
  - url: https://your-api-domain.com/api/v1
    description: Production server

tags:
  - name: Users
    description: User management operations
  - name: Authentication
    description: Authentication operations
  - name: Products
    description: Product management operations
  - name: Carts
    description: Shopping cart operations
  - name: Orders
    description: Order management operations
  - name: Reviews
    description: Product review operations
  - name: Favorites
    description: User favorites operations

paths:
  /register:
    post:
      summary: Registers a new user
      tags:
        - Users
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: secure_password123
                bio:
                  type: string
                  example: E-commerce enthusiast
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /login:
    post:
      summary: Authenticates a user
      tags:
        - Authentication
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /confirm_email:
    get:
      summary: Confirms a user's email address
      tags:
        - Users
      operationId: confirmEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmed successfully
          content:
            text/plain:
              schema:
                type: string
        '422':
          description: Invalid or already confirmed token

  /resend_confirmation:
    post:
      summary: Resends the confirmation email
      tags:
        - Users
      operationId: resendConfirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Confirmation email resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '422':
          $ref: '#/components/responses/ValidationError'

  /password_reset:
    post:
      summary: Initiates a password reset process
      tags:
        - Users
      operationId: passwordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '422':
          $ref: '#/components/responses/ValidationError'

  /password_reset/confirm:
    post:
      summary: Completes the password reset process
      tags:
        - Users
      operationId: confirmPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - token
                - password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '422':
          $ref: '#/components/responses/ValidationError'

  /products:
    get:
      summary: Lists available products
      tags:
        - Products
      operationId: listProducts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: category
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
            enum: [price, name, created_at]
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

  /products/{id}:
    get:
      summary: Gets product details
      tags:
        - Products
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /cart:
    get:
      summary: Views the current user's cart
      tags:
        - Carts
      operationId: viewCart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cart_items:
    post:
      summary: Adds an item to the cart
      tags:
        - Carts
      operationId: addCartItem
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  format: int64
                quantity:
                  type: integer
                  minimum: 1
                  default: 1
              required:
                - product_id
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /cart_items/{id}:
    patch:
      summary: Updates a cart item
      tags:
        - Carts
      operationId: updateCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
              required:
                - quantity
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Removes an item from the cart
      tags:
        - Carts
      operationId: removeCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Cart item removed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders:
    get:
      summary: Lists user orders
      tags:
        - Orders
      operationId: listOrders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Orders retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Creates a new order
      tags:
        - Orders
      operationId: createOrder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shipping_address:
                  $ref: '#/components/schemas/Address'
                payment_method:
                  type: string
              required:
                - shipping_address
                - payment_method
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /orders/{id}:
    get:
      summary: Gets order details
      tags:
        - Orders
      operationId: getOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /products/{product_id}/reviews:
    get:
      summary: Lists product reviews
      tags:
        - Reviews
      operationId: listProductReviews
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Creates a product review
      tags:
        - Reviews
      operationId: createProductReview
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
              required:
                - rating
                - comment
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  /favourites:
    get:
      summary: Lists favorite products
      tags:
        - Favorites
      operationId: listFavorites
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: Favorites retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteList'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Adds a product to favorites
      tags:
        - Favorites
      operationId: addFavorite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  format: int64
              required:
                - product_id
      responses:
        '201':
          description: Product added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  /favourites/{id}:
    delete:
      summary: Removes a product from favorites
      tags:
        - Favorites
      operationId: removeFavorite
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product removed from favorites
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        default: 1
        minimum: 1
    PerPageParam:
      name: per_page
      in: query
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true

    UserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                bio:
                  type: string
                  nullable: true
        token:
          type: string

    ProductList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    Product:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            price:
              type: number
              format: float
            stock:
              type: integer
            image_url:
              type: string
              format: uri
            category:
              type: string

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                average_rating:
                  type: number
                  format: float
                review_count:
                  type: integer
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
        total:
          type: number

    Cart:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                total_items:
                  type: integer
                subtotal:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/CartItem'

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
      required:
        - street
        - city
        - state
        - zip
        - country

    OrderItem:
      type: object
      properties:
        product_id:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
        total:
          type: number

    OrderList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderSummary'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    OrderSummary:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            order_number:
              type: string
            date:
              type: string
              format: date-time
            status:
              type: string
              enum: [pending, processing, shipped, delivered, cancelled]
            total:
              type: number

    Order:
      allOf:
        - $ref: '#/components/schemas/OrderSummary'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
                shipping_address:
                  $ref: '#/components/schemas/Address'
                payment_method:
                  type: string

    ReviewList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    Review:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            rating:
              type: integer
              minimum: 1
              maximum: 5
            comment:
              type: string
            user_id:
              type: integer
            username:
              type: string
            created_at:
              type: string
              format: date-time

    FavoriteList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Favorite'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    Favorite:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            product:
              $ref: '#/components/schemas/Product'
            created_at:
              type: string
              format: date-time

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        total_pages:
          type: integer
        total_count:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        status:
          type: integer

    ValidationError:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    Message:
      type: object
      properties:
        message:
          type: string
